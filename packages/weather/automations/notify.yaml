- alias: Notify - Weather every morning when all lights are off for 30 seconds
  description: ''
  trigger:
  - entity_id: light.all_lights
    for: 00:00:30
    from: 'on'
    platform: state
    to: 'off'
  condition:
  - after: 09:40
    before: '10:30'
    condition: time
  action:
  - service: script.automate_notify
    data:
      message: "It is {{ state_attr(\"weather.dark_sky\", \"temperature\") }}C outside.\
        \  \n{% for  rainy_date in state_attr(\"weather.dark_sky\", \"forecast\")\
        \ | selectattr(\"condition\", \"eq\", \"rainy\") | map(attribute=\"datetime\"\
        ) %}Will rain at {{ rainy_date }}  \n{% endfor %}\n"

- alias: Notify - Updates available
  description: ''
  trigger:
  - entity_id: binary_sensor.updater
    from: 'off'
    platform: state
    to: 'on'
  condition: []
  action:
  - service: script.automate_notify
    data:
      title: Updater
      message: An update is available!
      icon: 61575

- alias: Notify - When a new weather alert is published (left)
  trigger:
    - platform: state
      entity_id: sensor.accuweather_active_alert_left
  condition:
    - condition: template
      value_template: "{{states('sensor.accuweather_active_alert_left') != 'unknown'}}"
  action:
    - service: script.automate_notify
      data:
        message: >
          {{states.sensor.accuweather_active_alert_left.state}}

- alias: Notify - When a new weather alert is published (right)
  trigger:
    - platform: state
      entity_id: sensor.accuweather_active_alert_right
  condition:
    - condition: template
      value_template: "{{states('sensor.accuweather_active_alert_right') != 'unknown'}}"
  action:
    - service: script.automate_notify
      data:
        message: >
          {{states.sensor.accuweather_active_alert_right.state}}
